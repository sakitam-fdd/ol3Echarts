"use strict";(self.webpackChunkol_echarts_docs=self.webpackChunkol_echarts_docs||[]).push([[11],{816:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=e(6106),r=e(2036);const a={id:"china-migration",title:"\u6625\u8282\u4eba\u53e3\u8fc1\u5f99"},i=void 0,s={id:"playgrounds/china-migration",title:"\u6625\u8282\u4eba\u53e3\u8fc1\u5f99",description:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",source:"@site/docs/playgrounds/china-migration.mdx",sourceDirName:"playgrounds",slug:"/playgrounds/china-migration",permalink:"/ol-echarts/docs/playgrounds/china-migration",draft:!1,unlisted:!1,editUrl:"https://github.com/sakitam-fdd/ol3Echarts/edit/master/documents/docs/docs/playgrounds/china-migration.mdx",tags:[],version:"current",lastUpdatedBy:"sakitam-fdd",lastUpdatedAt:1730645386e3,frontMatter:{id:"china-migration",title:"\u6625\u8282\u4eba\u53e3\u8fc1\u5f99"},sidebar:"docs",previous:{title:"\u676d\u5dde\u70ed\u95e8\u6b65\u884c\u8def\u7ebf",permalink:"/ol-echarts/docs/playgrounds/track-line"},next:{title:"\u6e58\u897f\u65c5\u6e38\u666f\u70b9\u5ba2\u6e90\u5206\u5e03\u56fe_\u57ce\u89c4\u6240",permalink:"/ol-echarts/docs/playgrounds/lines-tourism"}},c={},l=[{value:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",id:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",level:3}];function d(n){const t={code:"code",h3:"h3",pre:"pre",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h3,{id:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b",children:"\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",metastring:"live",live:!0,children:"function render(props) {\n  const container = useRef(null);\n\n  const dataUrl = useBaseUrl('/json/china-migration.json');\n  const airlineUrl = useBaseUrl('/json/china-airline.json');\n\n  // \u7ecf\u7eac\u5ea6\u83b7\u53d6\n  function getGeoCoord(geoCoord, name) {\n    const city = name.split('_').pop();\n    if (city) {\n      const coord = geoCoord[city];\n      return coord;\n    }\n\n    return null;\n  }\n\n  // \u7ebf\u8def\u83b7\u53d6\n  function getLineCoord(geoCoord, fromname, toname) {\n    if (fromname && toname) {\n      const _start = fromname.split('_').pop();\n      const _end = toname.split('_').pop();\n      if (_start && _end) {\n        const fromCoord = geoCoord[_start];\n        const toCoord = geoCoord[_end];\n        return {\n          fromName: _start,\n          toName: _end,\n          coords: [fromCoord, toCoord],\n        };\n      }\n      return null;\n    }\n    return null;\n  }\n\n  const initChat = (map, option) => {\n    const chart = new EChartsLayer(option, {\n      stopEvent: false,\n      hideOnMoving: false,\n      hideOnZooming: false,\n      forcedPrecomposeRerender: true,\n    });\n\n    chart.appendTo(map);\n  }\n\n  const init = async () => {\n    const map = new ol.Map({\n      target: container.current,\n      view: new ol.View({\n        projection: 'EPSG:4326',\n        zoom: 5,\n        rotation: 0,\n        center: [113.53450137499999, 34.44104525],\n      }),\n      layers: [\n        new TileLayer({\n          source: new XYZ({\n            url: 'https://{a-c}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',\n          }),\n        }),\n      ],\n    });\n\n    function convertData(sourceData) {\n      return [].concat.apply(\n        [],\n        sourceData.map((busLine) => {\n          let prevPoint = null;\n          const points = [];\n          const value = busLine.shift();\n          for (let i = 0; i < busLine.length; i += 2) {\n            let point = [busLine[i], busLine[i + 1]];\n            if (i > 0) {\n              point = [prevPoint[0] + point[0], prevPoint[1] + point[1]];\n            }\n            prevPoint = point;\n            points.push([point[0] / 1e5, point[1] / 1e5]);\n          }\n          return {\n            value,\n            coords: points,\n          };\n        }),\n      );\n    }\n\n    const geoCoord = await fetch(dataUrl).then(res => res.json());\n    const data = await fetch(airlineUrl).then(res => res.json());\n\n    const option = {\n      backgroundColor: 'transparent',\n      title: {\n        text: '\u6625\u8282\u4eba\u53e3\u8fc1\u5f99',\n        x: 'center',\n        y: 'top',\n        textStyle: {\n          color: 'white',\n        },\n      },\n      legend: {\n        show: true,\n        selected: {},\n        x: 'left',\n        orient: 'vertical',\n        textStyle: {\n          color: 'white',\n        },\n        data: [],\n      },\n      series: [\n        {\n          name: 'Migration',\n          type: 'lines',\n          effect: {\n            constantSpeed: 30,\n            show: true,\n            trailLength: 1,\n            symbolSize: 1.5,\n            color: 'rgba(204, 246, 255, 1)',\n          },\n\n          itemStyle: {\n            lineStyle: {\n              color: 'rgba(2, 166, 253, 1)',\n              type: 'solid',\n              width: 0.5,\n              opacity: 0.4,\n            },\n          },\n          data: [],\n        },\n        {\n          symbol: 'circle',\n          type: 'effectScatter',\n          symbolSize: 1.5,\n          itemStyle: {\n            color: 'rgba(255, 0, 0, 1)',\n          },\n          data: [],\n        },\n      ],\n    };\n    data.allLine\n      .sort((a, b) => b.num - a.num)\n      .slice(0, 3000)\n      .forEach((line) => {\n        const callData = getLineCoord(geoCoord, line.start, line.end);\n        if (callData) {\n          option.series[0].data.push();\n        }\n      });\n    option.series[1].data = data.topCityOut.map((point) => ({\n      value: getGeoCoord(geoCoord, point.name),\n    }));\n\n    initChat(map, option);\n\n    function resize(target) {}\n\n    return {\n      resize,\n    }\n  }\n\n  useEffect(() => {\n    const { resize } = init();\n\n    return () => {\n    };\n  }, []);\n\n  return (\n    <div className=\"live-wrap\">\n      <div ref={container} className=\"map-content\" />\n    </div>\n  );\n}\n"})})]})}function p(n={}){const{wrapper:t}={...(0,r.R)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},2036:(n,t,e)=>{e.d(t,{R:()=>i,x:()=>s});var o=e(7378);const r={},a=o.createContext(r);function i(n){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function s(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(a.Provider,{value:t},n.children)}}}]);